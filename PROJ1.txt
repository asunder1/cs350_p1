System Calls Project

Group 8:
* Alexander Sunderhaft 
* Yashwanth Reddy Medapati
* Alex Eskenazi

Status: All task completed, compiled, linked and tested

shudown:
* Implemented individually by each team member after discussion.

mkdir2:
* Implemented by Alexander Sunderhaft.

shutdown2:
* Implemented by Alex Eskenazi.

exit2:
* Implemented by Yashwanth Reddy Medapati.

uptime2:
* Implemented by Yashwanth Reddy Medapati.

Notes:
For mkdir2, no specs were given for behavior if only one dir could be made.
Implementation here contains behavior as follows:
If both directories could be made: makes both and returns 0
If A could be made but not B, or if B could be made but not A: makes the one directory and returns -1
If both directories could not be made: makes nothing and returns -1

--------------------------------------------------
Custom sytem call 1: procs
* by Alexander Sunderhaft.
* List the current processes with specific data about them depending on the parameter.
* procs state - displays the processes state.
* procs openfiles - displays the list of open file descriptors.
* procs ids - displays the process ids and parent ids.

output from tests:

$ procs state
Name    State
init    sleep 
sh      sleep 
procs   run   
$ procs openfiles
Name    Open Files
init    0 1 2 
sh      0 1 2 
procs   0 1 2 
$ procs ids
Name    ID      Parent ID
init    1       NULL
sh      2       1
procs   6       2
$

Notes:
sys_procs is implemented in proc.c intead of sysproc.c



--------------------------------------------------
Custom sytem call 2: mkdirn
* by Alex Eskenazi.
* mkdirn: creates n directories with the numbers as sufix.
* Takes two parameters:
** n is the number of directories to create from 0 to 9 (to keep it simple)
** path is the main directory name

* For example: mkdirn 5 mydir
* will create 5 directories named mydir1, mydir2, mydir3, mydir4, mydir5

output from tests:

$ mkdirn 5 Hola
$ ls
.              1 1 512
..             1 1 512
README         2 2 674
cat            2 3 15296
echo           2 4 14184
forktest       2 5 8796
grep           2 6 18100
init           2 7 14812
kill           2 8 14292
ln             2 9 14172
ls             2 10 16748
mkdir          2 11 14300
rm             2 12 14280
sh             2 13 27308
stressfs       2 14 15028
usertests      2 15 61892
wc             2 16 15660
zombie         2 17 13876
shutdown       2 18 14040
shutdown2      2 19 14592
uptime2        2 20 14780
mkdir2         2 21 14132
exit2          2 22 14440
procs          2 23 14356
mkdirn         2 24 14500
console        3 25 0
Hola1          1 26 32
Hola2          1 27 32
Hola3          1 28 32
Hola4          1 29 32
Hola5          1 30 32

--------------------------------------------------
Custom system call: uptime2
* By Yashwanth Reddy Medapati
* The uptime2 system call returns the number of clock ticks since the system started, 
  similar to the original uptime system call.
* uptime2 converts the clock ticks into seconds and milliseconds, 
  providing more precise system uptime information.

Example Usage: 
$ uptime2 2|

Output From Tests:
$ uptime2 2
Current Uptime in seconds: 7

$ uptime2 1
Current Uptime in ticks: 1679

$ uptime2 3
Current Uptime in minutes: 0

$uptime2 14
Available options for uptime output: 
[
1=seconds,
2=days,
3=years
]

$ ls
.              1 1 512
..             1 1 512
README         2 2 674
cat            2 3 15380
echo           2 4 14268
forktest       2 5 8880
grep           2 6 18188
init           2 7 14896
kill           2 8 14376
ln             2 9 14256
ls             2 10 16836
mkdir          2 11 14380
rm             2 12 14360
sh             2 13 27392
stressfs       2 14 15116
usertests      2 15 61976
wc             2 16 15740
zombie         2 17 13956
shutdown       2 18 14124
shutdown2      2 19 14676
uptime2        2 20 14704
mkdir2         2 21 14216
exit2          2 22 14364
procs          2 23 14436
mkdirn         2 24 14584
console        3 25 0

--------------------------------------------------
Custom system call: exit2
* By Yashwanth Reddy Medapati
* The exit2 system call allows a process to terminate while passing an exit status to the kernel, 
  while the original exit system call, which does not take a status argument.
* The status status can be used by the parent process to determine the reason for termination.

Example Usage:
$ exit2 0

Output From Tests:
$ exit2 0  
Process exited with status: 0  

$ exit2 1  
Process exited with status: 1  

$ exit2 200
Process exited with status: 200

$ ls
.              1 1 512
..             1 1 512
README         2 2 674
cat            2 3 15380
echo           2 4 14268
forktest       2 5 8880
grep           2 6 18188
init           2 7 14896
kill           2 8 14376
ln             2 9 14256
ls             2 10 16836
mkdir          2 11 14380
rm             2 12 14360
sh             2 13 27392
stressfs       2 14 15116
usertests      2 15 61976
wc             2 16 15740
zombie         2 17 13956
shutdown       2 18 14124
shutdown2      2 19 14676
uptime2        2 20 14704
mkdir2         2 21 14216
exit2          2 22 14364
procs          2 23 14436
mkdirn         2 24 14584
console        3 25 0
